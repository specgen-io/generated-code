version: 2.1

parameters:
  specgen-version:
    type: string
    default: 2.0.568
  specgen-version-major:
    type: string
    default: v2

jobs:
  generated-code:
    docker:
      - image: cimg/go:1.16.4
    steps:
      - checkout
      - run:
          name: Install specgen
          command: |
            go install github.com/specgen-io/specgen/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>
            specgen --help
      - run:
          name: Download models spec
          command: |
            mkdir -p /tmp/models/
            cd /tmp/models/
            curl -LJO https://raw.githubusercontent.com/specgen-io/test-models/main/spec.yaml
      - run:
          name: Download clients spec
          command: |
            mkdir -p /tmp/clients/
            cd /tmp/clients/
            curl -LJO https://raw.githubusercontent.com/specgen-io/test-clients/main/spec.yaml
      - run:
          name: Download services spec
          command: |
            mkdir -p /tmp/services/
            cd /tmp/services/
            curl -LJO https://raw.githubusercontent.com/specgen-io/test-services/main/spec.yaml
      - run:
          name: Generate models code
          command: |
            rm -R -- ./models/*/
            cd models

            mkdir openapi
            cp /tmp/models/spec.yaml ./openapi/spec.yaml
            specgen openapi --spec-file ./openapi/spec.yaml --out-file ./openapi/swagger.yaml

            mkdir java
            cp /tmp/models/spec.yaml ./java/spec.yaml
            specgen models-java --spec-file ./java/spec.yaml --generate-path ./java

            mkdir go
            cp /tmp/models/spec.yaml ./go/spec.yaml
            specgen models-go --spec-file ./go/spec.yaml --generate-path ./go

            mkdir ruby
            cp /tmp/models/spec.yaml ./ruby/spec.yaml
            specgen models-ruby --spec-file ./ruby/spec.yaml --generate-path ./ruby

            mkdir scala-circe
            cp /tmp/models/spec.yaml ./scala-circe/spec.yaml
            specgen models-scala-circe --spec-file ./scala-circe/spec.yaml --generate-path ./scala-circe

            mkdir ts-iots
            cp /tmp/models/spec.yaml ./ts-iots/spec.yaml
            specgen models-ts --validation io-ts --spec-file ./ts-iots/spec.yaml --generate-path ./ts-iots

            mkdir ts-superstruct
            cp /tmp/models/spec.yaml ./ts-superstruct/spec.yaml
            specgen models-ts --validation superstruct --spec-file ./ts-superstruct/spec.yaml --generate-path ./ts-superstruct
      - tree:
          path: ./models
      - run:
          name: Generate clients code
          command: |
            rm -R -- ./clients/*/
            cd clients

            mkdir openapi
            cp /tmp/clients/spec.yaml ./openapi/spec.yaml
            specgen openapi --spec-file ./openapi/spec.yaml --out-file ./openapi/swagger.yaml
            
            mkdir go
            cp /tmp/clients/spec.yaml ./go/spec.yaml
            specgen client-go --spec-file ./go/spec.yaml --generate-path ./go
            
            mkdir ruby
            cp /tmp/clients/spec.yaml ./ruby/spec.yaml
            specgen client-ruby --spec-file ./ruby/spec.yaml --generate-path ./ruby
            
            mkdir scala-sttp
            cp /tmp/clients/spec.yaml ./scala-sttp/spec.yaml
            specgen client-scala-sttp --spec-file ./scala-sttp/spec.yaml --generate-path ./scala-sttp
            
            mkdir ts-axios-superstruct
            cp /tmp/clients/spec.yaml ./ts-axios-superstruct/spec.yaml
            specgen client-ts-axios --validation superstruct --spec-file ./ts-axios-superstruct/spec.yaml --generate-path ./ts-axios-superstruct
            
            mkdir ts-axios-iots
            cp /tmp/clients/spec.yaml ./ts-axios-iots/spec.yaml
            specgen client-ts-axios --validation io-ts --spec-file ./ts-axios-iots/spec.yaml --generate-path ./ts-axios-iots
      - tree:
          path: ./clients
      - run:
          name: Generate services code
          command: |
            rm -R -- ./services/*/
            cd services

            mkdir openapi
            cp /tmp/services/spec.yaml ./openapi/spec.yaml
            specgen openapi --spec-file ./openapi/spec.yaml --out-file ./openapi/swagger.yaml

            mkdir go
            cp /tmp/services/spec.yaml ./go/spec.yaml
            specgen service-go --spec-file ./go/spec.yaml --generate-path ./go

            mkdir scala-play
            cp /tmp/services/spec.yaml ./scala-play/spec.yaml
            specgen service-scala-play --spec-file ./scala-play/spec.yaml --generate-path ./scala-play --services-path ./scala-play/services

            mkdir ts-express-superstruct
            cp /tmp/services/spec.yaml ./ts-express-superstruct/spec.yaml
            specgen service-ts --server express --validation superstruct --spec-file ./ts-express-superstruct/spec.yaml --generate-path ./ts-express-superstruct --services-path ./ts-express-superstruct/services

            mkdir ts-koa-superstruct
            cp /tmp/services/spec.yaml ./ts-koa-superstruct/spec.yaml
            specgen service-ts --server koa --validation superstruct --spec-file ./ts-koa-superstruct/spec.yaml --generate-path ./ts-koa-superstruct --services-path ./ts-koa-superstruct/services
      - tree:
          path: ./services
      - run:
          name: Commit changes
          command: |
            git add --all
            git config --global user.email $GITHUB_EMAIL
            git config --global user.name $GITHUB_USER
            git remote set-url origin https://$GITHUB_USER:$GITHUB_TOKEN@github.com/specgen-io/generated-code.git
            if [[ `git status --porcelain` ]]; then
              git commit -m "[skip ci] Generated code with specgen <<pipeline.parameters.specgen-version>>"
              git push
            else
              echo "No changes detected - nothing to commit"
            fi
            git tag -f -a v<<pipeline.parameters.specgen-version>> -m "Specgen verison: v<<pipeline.parameters.specgen-version>>"
            git push -f --tags

commands:
  tree:
    parameters:
      path:
        type: string
        default: .
    steps:
      - run:
          name: Print flie system tree
          command: find <<parameters.path>> | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"

workflows:
  generated-code:
    jobs:
      - generated-code:
          context: specgen
